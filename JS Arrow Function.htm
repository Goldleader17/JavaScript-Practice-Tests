<!DOCTYPE html>
<html>

<body>

    <h2>JavaScript Functions</h2>
    <h3>The Arrow Function</h3>

    <p>This example shows the syntax of an Arrow Function, and how to use it.</p>

    <p id="demo"></p>

    <script>
        let myFunction = (a, b) => a * b;
        document.getElementById("demo").innerHTML = myFunction(4, 5);
    </script><br>

    <p>This example shows the syntax of a function, without the use of arrow function syntax.</p>

    <p id="demo1"></p>

    <script>
        let hello = "";

        hello = function() {
            return "Hello World!";
        }
        document.getElementById("demo1").innerHTML = hello();
    </script><br>

    <p>This example shows the syntax of an Arrow Function, and how to use it.</p>

    <p id="demo2"></p>

    <script>
        let hello1 = "";

        hello1 = () => {
            return "Hello World!";
        }
        document.getElementById("demo2").innerHTML = hello1();
    </script><br>

    <p>This example shows an Arrow Function without the brackets or the return keyword.</p>

    <p id="demo3"></p>

    <script>
        let hello2 = "";

        hello2 = () => "Hello World!";

        document.getElementById("demo3").innerHTML = hello2();
    </script><br>

    <!--This works only if the function has only one statement.-->

    <p>This example shows an Arrow Function with a parameter.</p>

    <p id="demo4"></p>

    <script>
        let hello3 = "";

        hello3 = (val) => "Hello " + val;

        document.getElementById("demo4").innerHTML = hello3("Universe!");
    </script><br>

    <p>This example shows that if you have only one parameter in an Arrow Function, you can skip the parentheses.</p>

    <p id="demo5"></p>

    <script>
        let hello4 = "";

        hello4 = val => "Hello " + val;

        document.getElementById("demo5").innerHTML = hello4("Universe!");
    </script><br>

    <h2>JavaScript "this"</h2>

    <p>This example demonstrate that in a regular function, the "this" keyword represents different objects depending on how the function was called.</p>

    <p>Click the button to execute the "hello" function again, and you will see that this time "this" represents the button object.</p>

    <button id="btn">Click Me!</button>

    <p id="demo6"></p>

    <script>
        let hello5 = "";

        hello5 = function() {
            document.getElementById("demo6").innerHTML += this;
        }

        // The window object calls the function:
        window.addEventListener("load", hello5);

        // A button object calls the function:
        document.getElementById("btn").addEventListener("click", hello5);
    </script><br>

    <p>This example demonstrate that in Arrow Functions, the "this" keyword represents the object that owns the function, no matter who calls the function.</p>

    <p>Click the button to execute the "hello" function again, and you will see that "this" still represents the window object.</p>

    <button id="btn1">Click Me!</button>

    <p id="demo7"></p>

    <script>
        let hello6 = "";

        hello6 = () => {

            document.getElementById("demo7").innerHTML += this;
        }

        // The window object calls the function:
        window.addEventListener("load", hello6);

        // A button object calls the function:
        document.getElementById("btn1").addEventListener("click", hello6);
    </script><br>

    <!--NB: Remember these differences when you are working with functions. Sometimes the behavior of regular functions is what you want, if not, use the arrow functions.
    -->

</body>
</html>